package pl.better.foodzilla.data.models.recipe

import android.graphics.Bitmap
import android.graphics.BitmapFactory
import android.os.Parcelable
import android.util.Base64
import kotlinx.parcelize.IgnoredOnParcel
import kotlinx.parcelize.Parcelize

@Parcelize
data class Recipe(
    val id: Long,
    val name: String,
    val description: String? = null,
    @IgnoredOnParcel
    var imageBase64: String? = null,
    val steps: List<String?>? = null,
    val rating: Float? = null,
    val preparationTime: Int? = null,
    val numberOfSteps: Int? = null,
    val numberOfIngredients: Int? = null,
    val calories: Double? = null,
    val fat: Int? = null,
    val sugar: Int? = null,
    val sodium: Int? = null,
    val protein: Int? = null,
    val saturatedFat: Int? = null,
    val carbohydrates: Int? = null,
    val reviews: List<RecipeReview>? = null,
    val ingredients: List<RecipeIngredient>? = null,
    val tags: List<RecipeTag>? = null,
    val isFavourite: Boolean? = null
): Parcelable {
    fun getBitmap(): Bitmap {
        var image = imageBase64
        if (image == null) { //default image
            image = "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"
        }
        val imageByteArray = Base64.decode(image, 0)
        return BitmapFactory.decodeByteArray(imageByteArray, 0, imageByteArray.size)
    }
}
